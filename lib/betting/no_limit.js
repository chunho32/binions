// Generated by CoffeeScript 1.12.5
(function() {
  var NoLimit;

  NoLimit = module.exports = function(small, big) {
    var Analysis, bigBlind, smallBlind;
    smallBlind = Math.floor(small / 2);
    bigBlind = small;
    return Analysis = (function() {
      function Analysis(players, state) {
        this.state = state;
        this.players = players;
        this.nextToAct = null;
        this.canRaise = true;
        this.offset = 0;
        this.minToCall = 0;
        this.minToRaise = 0;
        if (players.length === 2 && this.state === 'pre-flop') {
          this.offset = 1;
        } else if (this.state === 'pre-flop') {
          this.offset = 2;
        }
        if (this.state === 'turn' || this.state === 'river') {
          this.roundMinimum = big;
        } else {
          this.roundMinimum = small;
        }
        this.analyze();
      }

      Analysis.prototype.gameActive = function() {
        var actives;
        actives = this.players.filter(function(pos) {
          return pos.active();
        });
        return actives.length > 1;
      };

      Analysis.prototype.actions = function() {
        var act, actions, i, j, k, l, len, player, ref, ref1;
        actions = [];
        for (i = k = 0, ref = this.players.length - 1; 0 <= ref ? k <= ref : k >= ref; i = 0 <= ref ? ++k : --k) {
          i = (i + this.offset) % this.players.length;
          player = this.players[i];
          ref1 = player.actions(this.state);
          for (j = l = 0, len = ref1.length; l < len; j = ++l) {
            act = ref1[j];
            actions[j] || (actions[j] = []);
            actions[j].push({
              bet: act.bet,
              type: act.type,
              position: i
            });
          }
        }
        if (actions.length > 0) {
          actions = actions.reduce(function(a, b) {
            return a.concat(b);
          });
        }
        return actions;
      };

      Analysis.prototype.currentWager = function() {
        var wagers;
        wagers = this.players.map(function(pos) {
          return pos.wagered || 0;
        });
        return Math.max.apply(Math, wagers);
      };

      Analysis.prototype.blinds = function() {
        if (this.players.length > 2) {
          return [smallBlind, bigBlind];
        } else {
          return [bigBlind, smallBlind];
        }
      };

      Analysis.prototype.analyze = function() {
        var act, currentBet, k, lastPosition, len, minRaise, previousBet, raise, ref;
        this.nextToAct = null;
        this.minToRaise = minRaise = this.roundMinimum;
        this.minToCall = this.currentWager();
        previousBet = 0;
        lastPosition = null;
        ref = this.actions();
        for (k = 0, len = ref.length; k < len; k++) {
          act = ref[k];
          currentBet = act['bet'] || 0;
          raise = currentBet - previousBet;
          if (currentBet > this.minToCall) {
            this.minToCall = currentBet;
          }
          if (raise >= minRaise) {
            minRaise = raise;
            this.lastRaisePosition = act['position'];
          }
          previousBet = currentBet;
          lastPosition = act['position'];
        }
        this.minToRaise = minRaise + this.minToCall;
        if (this.gameActive()) {
          this.setNextToAct(lastPosition);
        }
        if (this.nextToAct) {
          return this.options();
        } else {
          return false;
        }
      };

      Analysis.prototype.setNextToAct = function(lastPos) {
        var i, k, nextPos, player, ref, ref1;
        if (lastPos == null) {
          lastPos = this.offset - 1;
        }
        nextPos = (lastPos + 1) % this.players.length;
        for (i = k = ref = nextPos, ref1 = nextPos + this.players.length; ref <= ref1 ? k <= ref1 : k >= ref1; i = ref <= ref1 ? ++k : --k) {
          player = this.players[i % this.players.length];
          if (player.canBet()) {
            if (player.wagered < this.minToCall) {
              this.nextToAct = player;
              break;
            }
            if (player.actions(this.state).length === 0) {
              this.nextToAct = player;
              break;
            }
          }
        }
        if (this.lastRaisePosition && this.players[this.lastRaisePosition] === this.nextToAct) {
          return this.canRaise = false;
        }
      };

      Analysis.prototype.bet = function(amount, position, err) {
        var player, total;
        if (position === null) {
          player = this.nextToAct;
        } else {
          player = this.players[position];
        }
        amount = parseInt(amount, 10) || 0;
        total = player.wagered + amount;
        amount = Math.min(amount, player.chips);
        if (player.chips === amount) {
          player.act(this.state, 'allIn', amount);
        } else if (this.minToCall - player.wagered === 0 && total < this.minToRaise) {
          player.act(this.state, 'check', 0, err);
        } else if (total < this.minToCall) {
          player.act(this.state, 'fold', 0, err);
        } else if (total >= this.minToRaise) {
          player.act(this.state, 'raise', amount);
        } else if (total >= this.minToCall) {
          player.act(this.state, 'call', this.minToCall - player.wagered);
        }
        return this.analyze();
      };

      Analysis.prototype.takeBlinds = function() {
        var blind, i, k, len, ref;
        ref = this.blinds();
        for (i = k = 0, len = ref.length; k < len; i = ++k) {
          blind = ref[i];
          this.players[i].takeBlind(blind);
        }
        return this.analyze();
      };

      Analysis.prototype.options = function() {
        var o;
        o = {};
        o.call = this.minToCall - this.nextToAct.wagered;
        o.raise = this.minToRaise - this.nextToAct.wagered;
        o.canRaise = this.canRaise;
        return o;
      };

      return Analysis;

    })();
  };

}).call(this);
